import os
from dotenv import load_dotenv
from aiogram import types, Router, F
from datetime import datetime
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Message, CallbackQuery

from database.models import db
from states.reminder import ReminderStates


router = Router()


@router.message(Command(commands=['newreminder']))
async def cmd_new_reminder(message: types.Message, state: FSMContext):
    await state.set_state(ReminderStates.waiting_for_name)
    await message.answer("‚ú® –í–≤–µ–¥—ñ—Ç—å —ñ–º'—è —ñ–º–µ–Ω–∏–Ω–Ω–∏–∫–∞/—ñ–º–µ–Ω–∏–Ω–Ω–∏—Ü—ñ:")


@router.message(ReminderStates.waiting_for_name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(ReminderStates.waiting_for_date)
    await message.answer(
        "üìÖ –í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ: <b>–î–î.–ú–ú.–†–†–†–†</b>\n"
        "–ù–∞–ø—Ä–∏–∫–ª–∞–¥: 25.12.1990",
        parse_mode='HTML'
    )


@router.message(ReminderStates.waiting_for_date)
async def process_date(message: types.Message, state: FSMContext):
    try:
        await state.update_data(date=message.text)
        await state.set_state(ReminderStates.waiting_for_message)
        await message.answer("üìù –ù–∞–ø–∏—à—ñ—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–µ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –∞–±–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:")

    except ValueError:
        await message.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.\n–ü—Ä–∏–∫–ª–∞–¥: 25.12.1990")


@router.message(ReminderStates.waiting_for_message)
async def process_message(message: types.Message, state: FSMContext):
    await state.update_data(message=message.text)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text='‚úÖ –¢–∞–∫', callback_data='early_yes'),
            InlineKeyboardButton(text='‚ùå –ù—ñ', callback_data='early_no')
        ]
    ])

    await state.set_state(ReminderStates.waiting_for_early_reminder)
    await message.answer(
        "üéÅ –ë–∞–∂–∞—î—Ç–µ –æ—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∑–∞–∑–¥–∞–ª–µ–≥—ñ–¥—å, —â–æ–± –ø—ñ–¥–≥–æ—Ç—É–≤–∞—Ç–∏ –ø–æ–¥–∞—Ä—É–Ω–æ–∫?\n"
        "–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –Ω–∏–∂—á–µ:",
        reply_markup=keyboard
    )


@router.callback_query(F.data.startswith("early_"))
async def process_early_reminder(callback: CallbackQuery, state: FSMContext):
    action = callback.data.split('_')[1]
    if action == 'no':
        data = await state.get_data()
        db.add_reminder(
            callback.from_user.id,
            data['name'],
            data['date'],
            data['message']
        )

        await callback.message.edit_text(
            f"‚úÖ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–æ!\n\n"
            f"üë§ –Ü–º'—è: {data['name']}\n"
            f"üìÖ –î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è: {data['date']}\n"
            f"üìù –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {data['message']}"
        )
        await state.clear()
    else:
        await state.set_state(ReminderStates.waiting_for_days_before)
        await callback.message.edit_text(
            "‚è≥ –ó–∞ —Å–∫—ñ–ª—å–∫–∏ –¥–Ω—ñ–≤ –¥–æ –¥–Ω—è –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è?\n"
            "–í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –≤—ñ–¥ 1 –¥–æ 30:"
        )


@router.message(ReminderStates.waiting_for_days_before)
async def process_days_before(message: Message, state: FSMContext):
    try:
        days = int(message.text)
        if 1 <= days <= 30:
            data = await state.get_data()
            db.add_reminder(
                message.from_user.id,
                data['name'],
                data['date'],
                data['message'],
                True,
                days
            )

            await message.answer(
                f"‚úÖ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–æ!\n\n"
                f"üë§ –Ü–º'—è: {data['name']}\n"
                f"üìÖ –î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è: {data['date']}\n"
                f"üìù –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {data['message']}\n"
                f"‚è≥ –ü–æ–ø–µ—Ä–µ–¥–Ω—î –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: –∑–∞ {days} –¥–Ω—ñ–≤"
            )
            await state.clear()
        else:
            await message.answer("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –≤—ñ–¥ 1 –¥–æ 30")
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ")


@router.message(Command(commands=['myreminders']))
async def cmd_my_reminders(message: Message):
    reminders = db.get_user_reminders(message.from_user.id)

    if not reminders:
        await message.answer("‚ÑπÔ∏è –£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –∂–æ–¥–Ω–æ–≥–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è")
        return

    for name, date, msg in reminders:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="üóë –í–∏–¥–∞–ª–∏—Ç–∏",
                callback_data=f"delete_{name}_{date}"
            )]
        ])

        await message.answer(
            f"üéÇ {name} - {date}\n"
            f"üìù {msg}",
            reply_markup=keyboard
        )


@router.callback_query(F.data.startswith("delete_"))
async def process_delete_reminder(callback: CallbackQuery):

    _, name, date = callback.data.split('_')

    if db.delete_reminder(callback.from_user.id, name, date):
        await callback.message.edit_text(
            f"‚úÖ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–æ:\n"
            f"üéÇ {name} - {date}",
            reply_markup=None
        )
        await callback.answer("–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ!")
    else:
        await callback.answer(f'‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è \n–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.', show_alert=True)
